###generate patch###

diff -purBN --no-dereference OCTEON-SDK.orig/bootloader/u-boot/ OCTEON-SDK.wmpatch/bootloader/u-boot/ > board20161102_uboot.patch 
diff -purBN --no-dereference OCTEON-SDK.orig/executive/ OCTEON-SDK.wmpatch/executive/ > board20161102_executive.patch 


##source code####
mkdir OCTEON-SDK_WM
cd /home/sdk312/sdk312p7/OCTEON-SDK_WM/
rpm -ivh  --prefix=/home/sdk312/sdk312p7/OCTEON-SDK-sffpatch/ --force /media/sf_F_DRIVE/SDK/SDK312/OCTEON-SDK-3.1.2-568.i386.rpm 
rpm -ivh  --prefix=/home/sdk312/sdk312p7/OCTEON-SDK-sffpatch/ --force /media/sf_F_DRIVE/SDK/SDK312/OCTEON-LINUX-3.1.2-568.i386.rpm 
cd OCTEON-SDK/
patch -s -p1 < /home/sdk312/sdk312p7/sdk-3.1.2-patch_release7/sdk.patch 
patch -s -p1 < /home/sdk312/sdk312p7/sdk-3.1.2-patch_release7/linux.patch
patch -s -p1 < /home/sdk312/sdk312p7/sdk-3.1.2-patch_release7/sdk-ejtag.patch  
rm tools
tar -xf /home/sdk312/sdk312p7/sdk-3.1.2-patch_release7/tools-3.1.2_build_49.tgz
ln -s tools-3.1.2_build_49 tools
/home/sdk312/sdk312p7/sdk-3.1.2-patch_release7/octeon_copy_3_1_2_p7_files.sh /home/sdk312/sdk312p7/sdk-3.1.2-patch_release7/


patch -s -p1 < /media/sf_F_DRIVE/WM71/board20161102_uboot.patch 
patch -s -p1 < /media/sf_F_DRIVE/WM71/board20161102_executive.patch

mv OCTEON-SDK OCTEON-SDK.wmdebug


source env-setup OCTEON_CN71XX
cd bootloader/u-boot
make clean
make octeon_generic_cn70xx_spi_stage2_config
make
cp u-boot-octeon_generic_cn70xx_spi_stage2.bin ../  
   
make clean
make octeon_sff7000_config
make
cp u-boot-octeon_sff7000.bin ../
cp u-boot-octeon_sff7000.bin /media/sf_F_DRIVE/tftproot/u-boot-octeon_sff7000_wm.bin

cd ../spi-boot/
make clean
make
cp spi-boot.bin ../
 


88E1512  -- RGMII   靠近电源下
serial console   靠近电源上，（亮灯）


setenv prompt WM7000#
setenv disable_pci 1
setenv ethact octrgmii0;
 dhcp;

setenv serverip 172.16.1.1;setenv ipaddr 172.16.1.2;setenv ethact octrgmii0

//offset 1MB
tftpboot 0 u-boot-octeon_sff7000_wm.bin
sf probe; sf update $(fileaddr) 0x100000 $(filesize); reset

//offset 8KB
tftpboot 0 u-boot-octeon_generic_cn70xx_spi_stage2.bin
sf probe;sf update $(fileaddr) 0x2000 $(filesize)

//offset 0KB
tftpboot 0 spi-boot.bin
sf probe; sf update $(fileaddr) 0x0 $(filesize)



##NAND uboot##
ubi/ubifs

setenv octeon_debug_nand info

Octeon sff7000(ram)# nand info

Device 0: nand0, sector size 256 KiB
  Size           1024 MiB
  Page size      4096 b
  OOB size        256 b
  Erase size   262144 b
  
nand device 0


#### only use when oob area was corrupted
#WM7000# nand scrub -y 0x0 0x40000000 
###

Octeon sff7000(ram)# nand erase.chip

NAND erase.chip: device 0 whole chip
Skipping bad block at  0x18000000                                          
Skipping bad block at  0x18040000                                          
Skipping bad block at  0x38000000                                          
Skipping bad block at  0x38040000                                          
Erasing at 0x3ffc0000 -- 100% complete.
OK


setenv mtdparts mtdparts=octeon_nand0:0x20000000@0x0(root)
saveenv
mtdparts
ubi part root
ubi create root
Octeon sff7000(ram)# ubi part root
UBI: attaching mtd1 to ubi0
UBI: physical eraseblock size:   262144 bytes (256 KiB)
UBI: logical eraseblock size:    258048 bytes
UBI: smallest flash I/O unit:    4096
UBI: sub-page size:              1024
UBI: VID header offset:          1024 (aligned 1024)
UBI: data offset:                4096
UBI: empty MTD device detected
UBI: create volume table (copy #1)
UBI: create volume table (copy #2)
UBI: attached mtd1 to ubi0
UBI: MTD device name:            "mtd=0"
UBI: MTD device size:            512 MiB
UBI: number of good PEBs:        2046
UBI: number of bad PEBs:         2
UBI: max. allowed volumes:       128
UBI: wear-leveling threshold:    4096
UBI: number of internal volumes: 1
UBI: number of user volumes:     0
UBI: available PEBs:             2022
UBI: total number of reserved PEBs: 24
UBI: number of PEBs reserved for bad PEB handling: 20
UBI: max/mean erase counter: 1/0
Octeon sff7000(ram)# ubi create root

mkdir roottmp
echo 111 > roottmp/1.txt
mkfs.ubifs -r roottmp/  -m 4096 -e 258048 -c 2000 -o rootfs_test.ubi
cp rootfs_test.ubi /media/sf_F_DRIVE/tftproot/

setenv serverip 172.16.1.1;setenv ipaddr 172.16.1.2;setenv ethact octrgmii0;
tftpboot 0 rootfs_test.ubi
ubi write $(fileaddr) root $(filesize)

reset
mtdparts
ubi part root
ubifsmount ubi0:root
ubifsls
ubifsload 80008000 1.txt

-m, --min-io-size=SIZE       minimum I/O unit size，最小输入输出大小 
-c, --max-leb-cnt=COUNT    maximum logical erase block count最大逻辑可擦出块数目 
-e, --leb-size=SIZE        logical erase block size逻辑可擦出块大小 

-m最小输入输出大小为2KiB(2048bytes)，一般为页大小 
-e逻辑可擦除块大小为124KiB=(每块的页数-2)*页大小=（64-2）*2KiB=124KiB 
-c最多逻辑可擦除块数目为720(720*128KiB=90MiB),这个可根据ubi volume来设置，实际上是设置此卷的最大容量

            
             
                  
#####boot LINUX
make menuconfig ARCH=mips
(1)Device Drivers ---> <*> Memory Technology Device (MTD) support ---> <*> Enable UBI - Unsorted block images 
(2)File systems --->[*] Miscellaneous filesystems ---> <*> UBIFS file system support


/home/sdk312/sdk312p7/OCTEON-SDKwm/
source env-setup OCTEON_CN71XX
cd linux
vi kernel/kernel.config 
modify
CONFIG_CAVIUM_OCTEON_NAND=y
make kernel
cd /tmp
mkfs.ubifs -r _home_sdk312_sdk312p7_OCTEON-SDKwm_linux_embedded_rootfs-rootfs/  -m 4096 -e 258048 -c 2000 -o rootfs_test2.ubi
cp rootfs_test2.ubi /media/sf_F_DRIVE/tftproot/rootfs_test2.ubi

cd /home/sdk312/sdk312p7/OCTEON-SDKwm/linux/
make kernel-deb
cp kernel/linux/vmlinux.64 /media/sf_F_DRIVE/tftproot/vmlinux.64.deb.wm

#######install mkfs.ubifs on CentOS Linux release 7.1.1503 (Core)###
yum install zlib-devel
yum install lzo-devel
wget ftp://ftp.infradead.org/pub/mtd-utils/mtd-utils-1.5.0.tar.bz2
tar xjvf mtd-utils-1.5.0.tar.bz2 
cd mtd-utils-1.5.0/
make
make install
[root@localhost mtd-utils-1.5.0]# mkfs.ubifs -V
mkfs.ubifs 1.5.0
####### 


###2017/2/7 19:41:59###
WM7000# nand info

Device 0: nand0, sector size 256 KiB
  Size           1024 MiB
  Page size      4096 b
  OOB size        256 b
  Erase size   262144 b

nand device 0
nand erase.chip
 nand erase 0x0 0x21000000

setenv mtdparts mtdparts=octeon_nand0:0x20000000@0x0(root)

mtdparts
ubi part root
ubi create root

Octeon sff7000(ram)# mtdparts

device nand0 <octeon_nand0>, # parts = 1
 #: name                size            offset          mask_flags
 0: root                0x20000000      0x00000000      0

active partition: nand0,0 - (root) 0x20000000 @ 0x00000000

defaults:
mtdids  : nand0=octeon_nand0
mtdparts: octeon_nand0:6m(bootloader)ro,2m(environment),8m(kernel),512m(rootfs)

WM7000# ubi part root
UBI: attaching mtd1 to ubi0
UBI: physical eraseblock size:   262144 bytes (256 KiB)
UBI: logical eraseblock size:    258048 bytes
UBI: smallest flash I/O unit:    4096
UBI: sub-page size:              1024
UBI: VID header offset:          1024 (aligned 1024)
UBI: data offset:                4096
UBI: empty MTD device detected
UBI: create volume table (copy #1)
UBI: create volume table (copy #2)
UBI: attached mtd1 to ubi0
UBI: MTD device name:            "mtd=1"
UBI: MTD device size:            512 MiB
UBI: number of good PEBs:        2046
UBI: number of bad PEBs:         2
UBI: max. allowed volumes:       128
UBI: wear-leveling threshold:    4096
UBI: number of internal volumes: 1
UBI: number of user volumes:     0
UBI: available PEBs:             2022
UBI: total number of reserved PEBs: 24
UBI: number of PEBs reserved for bad PEB handling: 20
UBI: max/mean erase counter: 1/0
WM7000# ubi create root
No size specified -> Using max size (260628480)
Creating dynamic volume root of size 260628480

 
setenv serverip 172.16.1.1;setenv ipaddr 172.16.1.2;setenv ethact octrgmii0;
tftpboot 0 rootfs_test2.ubi

ubi write $(fileaddr) root $(filesize)

reset
mtdparts
ubi part root
--UBI: attaching mtd2 to ubi0

ubifsmount ubi0:root
ubifsls
ubifsls sbin
ubifsload 80008000 sbin/ip

ubifsumount


setenv serverip 172.16.1.1;setenv ipaddr 172.16.1.2;setenv ethact octrgmii0;
tftpboot 0 vmlinux.64.deb.wm;
bootoctlinux 0 numcores=2 endbootargs ubi.mtd=1 root=ubi0:root rootfstype=ubifs rw octeon-nand.wmboard=1


#WM7000# nand scrub -y 0x0 0x40000000 
 nand erase.chip
setenv nand_ecc_mode none
setenv nand_ecc_mode soft
setenv nand_ecc_mode ' '

setenv serverip 172.16.1.1;setenv ipaddr 172.16.1.2;setenv ethact octrgmii0;
tftpboot 0 spi-boot.bin

nand scrub -y 0x21000000 0x2000 
nand write $(fileaddr) 0x21000000 0x2000
nand read $(loadaddr) 0x21000000 0x2000

nand dump 0x21000000
nand dump 0x21001000


tftpboot 0 traffic-gen-sdk312p3.71.noflow
md5sum $(loadaddr) 0xe6a0f5
md5 for 20000000 ... 20e6a0f4 ==> 9f2a260190e3bc07d561651befa8c07a
md $(loadaddr) 0x39A83D

nand erase 0x21000000 0x1000000
nand write $(fileaddr) 0x21000000 0xe6a0f5
nand read $(loadaddr) 0x21000000 0xe6a0f5
md $(loadaddr) 3778621
Octeon sff7000(ram)# md5sum $(loadaddr) 0xe6a0f5
md5 for 20000000 ... 20e6a0f4 ==> b119123686a0f36e6802c0ade7ad0dc4
bootoct 0 numcores=2 

nand dump 0x21000000
nand dump 0x2103f000

nand write.raw $(fileaddr) 0x21000000 0xe70
nand read.raw $(loadaddr) 0x21000000 0xe70

setenv serverip 172.16.1.1;setenv ipaddr 172.16.1.2;setenv ethact octrgmii0;
tftpboot 0 vmlinux.64.deb.wm;
 nand erase 0x21000000 0x6000000
  nand write $(fileaddr) 0x21000000 0x6000000
  reboot
nand read $(loadaddr) 0x21000000 0x6000000
bootoctlinux 0 numcores=2 endbootargs ubi.mtd=1 root=ubi0:root rootfstype=ubifs rw octeon-nand.wmboard=1
